import { GoogleGenerativeAI } from '@google/generative-ai';
import axios from 'axios';

const API_KEY = 'AIzaSyCSZo6wMOi8s3mzCrjt-xZr4U-36U--bCo';

console.warn('Initialisation du service Gemini avec la cl√© API:', API_KEY ? 'Pr√©sente' : 'Manquante');

// Configuration de l'API Gemini
const genAI = new GoogleGenerativeAI(API_KEY, {
    apiVersion: 'v1beta'  // Utiliser la version beta de l'API
});

console.warn('Instance GoogleGenerativeAI cr√©√©e');

// Initialiser le mod√®le avec la configuration de base
const model = genAI.getGenerativeModel({ 
    model: "gemini-2.0-flash",  // Utiliser le mod√®le flash qui est plus rapide
    generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
    },
    safetySettings: [
        {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
    ]
});

console.warn('Mod√®le Gemini configur√© avec les param√®tres:', {
    model: "gemini-2.0-flash",
    temperature: 0.7,
    maxOutputTokens: 1024
});

export const chatWithGemini = async (message, conversationHistory, userInfo) => {
    console.warn('=== GEMINI API CALL ===');
    console.warn('Message:', message);
    console.warn('Conversation history length:', conversationHistory.length);
    console.warn('User info:', userInfo);
    
    const maxRetries = 3;
    const retryDelay = 2000; // 2 secondes

    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    const attemptRequest = async (retryCount = 0) => {
        try {
            // V√©rification de la cl√© API
            if (!API_KEY) {
                console.error('Erreur: Cl√© API manquante');
                throw new Error('La cl√© API Gemini n\'est pas configur√©e.');
            }

            // V√©rification des options de ticket
            if (!userInfo?.ticketOptions) {
                throw new Error('Les options de ticket ne sont pas disponibles. Veuillez rafra√Æchir la page.');
            }

            // V√©rification que toutes les options n√©cessaires sont pr√©sentes
            const requiredOptions = ['categories', 'emplacements', 'priorites'];
            const missingOptions = requiredOptions.filter(option => !userInfo.ticketOptions[option]?.length);
            
            if (missingOptions.length > 0) {
                throw new Error(`Les options suivantes ne sont pas disponibles : ${missingOptions.join(', ')}. Veuillez rafra√Æchir la page.`);
            }

            // Fonction utilitaire pour formater les options
            const formatOptions = (options) => {
                if (!options || !Array.isArray(options)) return '';
                return options.map(opt => opt.designation || '').filter(Boolean).join(', ');
            };

            // D√©finition du SYSTEM_PROMPT avec les informations de l'utilisateur et les options disponibles
            const SYSTEM_PROMPT = `Tu es un assistant professionnel sp√©cialis√© dans la cr√©ation de tickets de support IT.
Ton r√¥le est de guider les utilisateurs de mani√®re professionnelle et efficace dans la cr√©ation de leurs tickets.

R√àGLES STRICTES DE CONVERSATION :
1. Tu DOIS suivre l'ordre exact des √©tapes ci-dessous
2. Tu DOIS poser UNE SEULE question √† la fois
3. Tu DOIS attendre la r√©ponse de l'utilisateur avant de poser la question suivante
4. Tu DOIS v√©rifier que chaque information est compl√®te avant de passer √† l'√©tape suivante
5. Tu NE DOIS PAS proposer de cr√©er le ticket avant d'avoir toutes les informations requises
6. Tu DOIS utiliser UNIQUEMENT les options fournies dans le contexte pour chaque choix
7. Tu NE DOIS JAMAIS demander les informations suivantes car elles sont d√©j√† connues :
   - Le demandeur (${userInfo.designation || 'Non sp√©cifi√©'})
   - La soci√©t√© (${userInfo.email?.split('@')[1] || 'Non sp√©cifi√©e'})
   - La date de cr√©ation (automatique)
8. Tu NE DOIS JAMAIS confirmer la cr√©ation du ticket - ce n'est pas ton r√¥le
9. √Ä la fin, tu DOIS UNIQUEMENT demander si l'utilisateur souhaite proc√©der √† la cr√©ation du ticket
10. Si l'utilisateur r√©pond "oui" √† la cr√©ation, tu DOIS :
    - V√©rifier que toutes les informations sont pr√©sentes
    - Si des informations manquent, les demander √† nouveau
    - Si toutes les informations sont pr√©sentes, indiquer que tu vas transmettre les informations pour la cr√©ation

R√àGLES DE REFORMULATION :
1. Pour le titre :
   - Utiliser un langage professionnel et technique
   - √ätre concis mais descriptif (max 200 caract√®res)
   - Commencer par un verbe d'action au pr√©sent
   - Inclure le contexte technique si pertinent
   - √âviter les abr√©viations non standard
   - Exemple : "R√©soudre probl√®me de connexion VPN sur poste utilisateur"

2. Pour la description :
   - √âcrire en un seul paragraphe fluide
   - Commencer par le contexte
   - Encha√Æner avec la description du probl√®me
   - Inclure les √©tapes de reproduction si applicable
   - Exemple :
     "L'utilisateur ne peut pas se connecter au VPN depuis son poste de travail. La connexion √©choue avec l'erreur 'Authentication failed' apr√®s saisie des identifiants."

OPTIONS DISPONIBLES :
- Cat√©gories : ${formatOptions(userInfo.ticketOptions.categories)}
- Emplacements : ${formatOptions(userInfo.ticketOptions.emplacements)}
- Priorit√©s : ${formatOptions(userInfo.ticketOptions.priorites)}

√âTAPES OBLIGATOIRES (√† suivre dans l'ordre) :

1. COLLECTE DU TITRE
   - Demander un titre concis et descriptif
   - Reformuler le titre de mani√®re professionnelle en suivant les r√®gles ci-dessus
   - ATTENDRE sa validation
   - Passer √† l'√©tape suivante

2. COLLECTE DE LA DESCRIPTION
   - Demander une description d√©taill√©e du probl√®me
   - Reformuler la description de mani√®re professionnelle en suivant les r√®gles ci-dessus
   - ATTENDRE sa validation
   - Passer √† l'√©tape suivante

3. COLLECTE DU COMMENTAIRE INITIAL
   - Demander un commentaire initial qui servira de suivi pour le ticket
   - Ce commentaire peut inclure des informations suppl√©mentaires, des pr√©cisions ou des instructions sp√©cifiques
   - ATTENDRE sa r√©ponse
   - Passer √† l'√©tape suivante

4. D√âTERMINATION DE LA CAT√âGORIE
   - Afficher les cat√©gories disponibles : ${formatOptions(userInfo.ticketOptions.categories)}
   - Demander √† l'utilisateur de choisir une cat√©gorie parmi celles list√©es
   - ATTENDRE sa r√©ponse
   - Passer √† l'√©tape suivante

5. COLLECTE DE L'EMPLACEMENT
   - Afficher les emplacements disponibles : ${formatOptions(userInfo.ticketOptions.emplacements)}
   - Demander √† l'utilisateur de choisir un emplacement parmi ceux list√©s
   - ATTENDRE sa r√©ponse
   - Passer √† l'√©tape suivante

6. D√âTERMINATION DE LA PRIORIT√â
   - Afficher les priorit√©s disponibles : ${formatOptions(userInfo.ticketOptions.priorites)}
   - Demander √† l'utilisateur de choisir une priorit√© parmi celles list√©es
   - ATTENDRE sa r√©ponse
   - Passer √† l'√©tape suivante

7. R√âSUM√â ET DEMANDE DE CR√âATION
   - Pr√©senter le r√©sum√© dans le format suivant :
     üìã R√âSUM√â DU TICKET
     ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
     üìå Titre : [titre reformul√©]
     üìù Description : [description en un seul paragraphe]
     üí¨ Commentaire initial : [commentaire]
     üè∑Ô∏è Cat√©gorie : [cat√©gorie]
     üìç Emplacement : [emplacement]
     ‚ö° Priorit√© : [priorit√©]
     ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   - Demander si l'utilisateur souhaite proc√©der √† la cr√©ation du ticket
   - Si l'utilisateur r√©pond "oui" :
     * V√©rifier que toutes les informations sont pr√©sentes
     * Si des informations manquent, les demander √† nouveau
     * Si toutes les informations sont pr√©sentes, indiquer que tu vas transmettre les informations pour la cr√©ation

EXEMPLES DE R√âPONSES PROFESSIONNELLES :
- "Pour commencer, pourriez-vous me donner un titre concis qui d√©crit votre probl√®me ? Je le reformulerai ensuite de mani√®re professionnelle."
- "Merci pour le titre. Voici ma proposition de reformulation professionnelle : [titre reformul√©]. √ätes-vous d'accord avec cette formulation ?"
- "Merci pour la description. Voici ma proposition de reformulation professionnelle : [description reformul√©e]. Cette formulation vous convient-elle ?"
- "Merci pour la description. Pourriez-vous ajouter un commentaire initial qui servira de suivi pour ce ticket ? Ce commentaire peut inclure des informations suppl√©mentaires ou des instructions sp√©cifiques."
- "Voici les cat√©gories disponibles : ${formatOptions(userInfo.ticketOptions.categories)}. Quelle cat√©gorie correspond le mieux √† votre demande ?"
- "Voici les emplacements disponibles : ${formatOptions(userInfo.ticketOptions.emplacements)}. Quel est l'emplacement concern√© ?"
- "Voici les priorit√©s disponibles : ${formatOptions(userInfo.ticketOptions.priorites)}. Quelle priorit√© souhaitez-vous attribuer √† ce ticket ?"
- "Je vais v√©rifier que toutes les informations sont pr√©sentes avant de proc√©der √† la cr√©ation du ticket."
- "Il manque certaines informations. Pourriez-vous me pr√©ciser [information manquante] ?"
- "Toutes les informations sont pr√©sentes. Je vais transmettre ces informations pour la cr√©ation du ticket."

IMPORTANT : Tu DOIS TOUJOURS demander un commentaire initial apr√®s la description et avant de demander la cat√©gorie. Ne saute JAMAIS cette √©tape.`;

            console.warn('Construction du contexte de conversation');
            // Construire le contexte de la conversation
            const chat = model.startChat({
                history: [
                    {
                        role: "user",
                        parts: SYSTEM_PROMPT,
                    },
                    ...conversationHistory.map(msg => ({
                        role: msg.role,
                        parts: msg.content,
                    })),
                ],
            });
            console.warn('Chat initialis√© avec l\'historique');

            console.warn('Envoi du message √† l\'API...');
            // Envoyer le message avec gestion des timeouts
            const timeoutDuration = 60000; // Augmenter le timeout √† 60 secondes
            const result = await Promise.race([
                chat.sendMessage(message).then(response => {
                    console.warn('R√©ponse brute de l\'API:', response);
                    return response;
                }),
                new Promise((_, reject) => 
                    setTimeout(() => {
                        console.error('Timeout: D√©lai d\'attente d√©pass√© apr√®s', timeoutDuration, 'ms');
                        reject(new Error('Le temps de r√©ponse est trop long. Veuillez r√©essayer.'));
                    }, timeoutDuration)
                )
            ]);
            console.warn('R√©ponse re√ßue de l\'API');

            const response = await result.response;
            console.warn('Texte de la r√©ponse extrait:', response.text());
            return response.text();
        } catch (error) {
            console.error('=== GEMINI API ERROR ===');
            console.error('Type d\'erreur:', error.constructor.name);
            console.error('Message d\'erreur:', error.message);
            console.error('Stack trace:', error.stack);
            
            // Gestion sp√©cifique des erreurs
            if (error.message.includes('API key')) {
                console.error('Erreur de cl√© API');
                throw new Error('Erreur de configuration de l\'API. Veuillez v√©rifier la cl√© API.');
            } else if (error.message.includes('quota')) {
                console.error('Erreur de quota d√©pass√©');
                throw new Error('Limite de requ√™tes atteinte. Veuillez r√©essayer plus tard.');
            } else if (error.message.includes('temps de r√©ponse')) {
                console.error('Erreur de timeout');
                throw new Error('Le temps de r√©ponse est trop long. Veuillez r√©essayer.');
            } else if (error.message.includes('safety')) {
                console.error('Erreur de s√©curit√©');
                throw new Error('Le contenu a √©t√© bloqu√© pour des raisons de s√©curit√©.');
            } else if (error.message.includes('overloaded') || error.message.includes('503')) {
                console.error('Erreur de surcharge du mod√®le');
                if (retryCount < maxRetries) {
                    console.log(`Tentative ${retryCount + 1}/${maxRetries} √©chou√©e. Nouvelle tentative dans ${retryDelay/1000} secondes...`);
                    await sleep(retryDelay);
                    return attemptRequest(retryCount + 1);
                }
                throw new Error('Le service est temporairement surcharg√©. Veuillez r√©essayer dans quelques instants.');
            } else {
                console.error('Erreur inattendue:', error);
                throw new Error('Une erreur est survenue lors de la communication avec l\'assistant. Veuillez r√©essayer.');
            }
        }
    };

    return attemptRequest();
};

export const extractTicketInfo = (conversationHistory, ticketOptions, userInfo) => {
    console.log('Options re√ßues:', ticketOptions);
    console.log('User info re√ßu:', userInfo);

    const ticketInfo = {
        title: '',
        description: '',
        commentaire: '',
        category: '',
        service: userInfo?.service?.designation || '',
        location: '',
        company: userInfo?.email ? userInfo.email.split('@')[1] : 'Non sp√©cifi√©e',
        requester: userInfo?.designation || 'Non sp√©cifi√©',
        status: 'Nouveau',
        priority: '',
        startDate: '',
        endDate: '',
        createdAt: new Date().toISOString(),
        id_utilisateur: userInfo?.id || 1,
        id_societe: userInfo?.id_societe || 1,
        id_emplacement: null,
        id_priorite: null,
        id_categorie: null,
        id_statut: 1,
        id_executant: 1
    };

    // Fonction utilitaire pour nettoyer le texte
    const cleanText = (text) => text.toLowerCase().trim();

    // Fonction pour trouver l'ID correspondant √† une d√©signation
    const findIdByDesignation = (designation, options) => {
        if (!designation || !options) return null;
        console.log('Recherche ID pour:', designation, 'dans les options:', options);

        // Nettoyer la d√©signation pour la comparaison
        const cleanDesignation = cleanText(designation);

        // Fonction pour normaliser le texte (enlever accents et caract√®res sp√©ciaux)
        const normalizeText = (text) => {
            return text
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '') // Enlever les accents
                .replace(/[^a-z0-9]/g, '') // Enlever les caract√®res sp√©ciaux
                .toLowerCase();
        };

        // Essayer diff√©rentes m√©thodes de correspondance
        let option = null;

        // 1. Correspondance exacte
        option = options.find(opt => cleanText(opt.designation) === cleanDesignation);
        if (option) {
            console.log('Correspondance exacte trouv√©e:', option);
            return option.id;
        }

        // 2. Correspondance normalis√©e
        const normalizedDesignation = normalizeText(cleanDesignation);
        option = options.find(opt => normalizeText(opt.designation) === normalizedDesignation);
        if (option) {
            console.log('Correspondance normalis√©e trouv√©e:', option);
            return option.id;
        }

        // 3. Correspondance partielle
        option = options.find(opt => {
            const optText = cleanText(opt.designation);
            return optText.includes(cleanDesignation) || cleanDesignation.includes(optText);
        });
        if (option) {
            console.log('Correspondance partielle trouv√©e:', option);
            return option.id;
        }

        // 4. Correspondance avec similarit√©
        option = options.find(opt => {
            const optText = normalizeText(opt.designation);
            const similarity = calculateSimilarity(normalizedDesignation, optText);
            return similarity > 0.8; // Seuil de similarit√© de 80%
        });
        if (option) {
            console.log('Correspondance par similarit√© trouv√©e:', option);
            return option.id;
        }

        console.log('Aucune correspondance trouv√©e pour:', designation);
        return null;
    };

    // Fonction pour calculer la similarit√© entre deux cha√Ænes
    const calculateSimilarity = (str1, str2) => {
        if (str1.length === 0 || str2.length === 0) return 0;
        if (str1 === str2) return 1;

        const longer = str1.length > str2.length ? str1 : str2;
        const shorter = str1.length > str2.length ? str2 : str1;

        if (longer.length === 0) return 1.0;

        return (longer.length - editDistance(longer, shorter)) / parseFloat(longer.length);
    };

    // Fonction pour calculer la distance d'√©dition (Levenshtein)
    const editDistance = (str1, str2) => {
        const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));

        for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
        for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;

        for (let j = 1; j <= str2.length; j++) {
            for (let i = 1; i <= str1.length; i++) {
                const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1, // suppression
                    matrix[j - 1][i] + 1, // insertion
                    matrix[j - 1][i - 1] + substitutionCost // substitution
                );
            }
        }

        return matrix[str2.length][str1.length];
    };

    // Fonction pour extraire une valeur apr√®s un √©moji
    const extractValue = (text, emoji) => {
        // Regex pour extraire la valeur apr√®s l'√©moji jusqu'√† la fin de la ligne ou le prochain √©moji
        const regex = new RegExp(`${emoji}\\s*([^\\nüìåüìùüí¨üè∑Ô∏èüìç‚ö°üìÖ]+)`, 'i');
        const match = text.match(regex);
        if (!match) return null;
        
        // Nettoyer la valeur extraite
        let value = match[1].trim();
        
        // Supprimer les labels communs et les deux-points
        value = value.replace(/^(Titre|Description|Commentaire initial|Cat√©gorie|Emplacement|Priorit√©|Date de d√©but|Date de fin)\s*:\s*/i, '');
        value = value.replace(/^:\s*/, ''); // Supprimer les deux-points au d√©but
        
        return value;
    };

    // Analyser l'historique de la conversation
    conversationHistory.forEach((message, index) => {
        if (message.role === 'assistant') {
            const content = message.content;
            console.log('Analyse du message:', content);

            // V√©rifier si c'est un message de r√©sum√©
            if (content.includes('üìã R√âSUM√â DU TICKET')) {
                console.log('R√©sum√© de ticket trouv√©');

                // Extraire le titre
                ticketInfo.title = extractValue(content, 'üìå');
                console.log('Titre extrait:', ticketInfo.title);

                // Extraire la description
                ticketInfo.description = extractValue(content, 'üìù');
                console.log('Description extraite:', ticketInfo.description);

                // Extraire le commentaire
                ticketInfo.commentaire = extractValue(content, 'üí¨');
                console.log('Commentaire extrait:', ticketInfo.commentaire);

                // Extraire la cat√©gorie
                ticketInfo.category = extractValue(content, 'üè∑Ô∏è');
                ticketInfo.id_categorie = findIdByDesignation(ticketInfo.category, ticketOptions.categories);
                console.log('Cat√©gorie extraite:', ticketInfo.category, 'ID:', ticketInfo.id_categorie);

                // Extraire l'emplacement
                ticketInfo.location = extractValue(content, 'üìç');
                ticketInfo.id_emplacement = findIdByDesignation(ticketInfo.location, ticketOptions.emplacements);
                console.log('Emplacement extrait:', ticketInfo.location, 'ID:', ticketInfo.id_emplacement);

                // Extraire la priorit√©
                ticketInfo.priority = extractValue(content, '‚ö°');
                ticketInfo.id_priorite = findIdByDesignation(ticketInfo.priority, ticketOptions.priorites);
                console.log('Priorit√© extraite:', ticketInfo.priority, 'ID:', ticketInfo.id_priorite);

                // Extraire les dates
                const startDate = extractValue(content, 'üìÖ Date de d√©but');
                const endDate = extractValue(content, 'üìÖ Date de fin');
                
                if (startDate) {
                    // Convertir la date au format YYYY-MM-DD
                    const [day, month, year] = startDate.split('/');
                    ticketInfo.startDate = `${year}-${month}-${day}`;
                    console.log('Date de d√©but extraite:', ticketInfo.startDate);
                }
                if (endDate) {
                    // Convertir la date au format YYYY-MM-DD
                    const [day, month, year] = endDate.split('/');
                    ticketInfo.endDate = `${year}-${month}-${day}`;
                    console.log('Date de fin extraite:', ticketInfo.endDate);
                }
            }
        }
    });

    console.log('Ticket info final:', ticketInfo);
    return ticketInfo;
};

export const createTicketFromChat = async (ticketData) => {
    try {
        const token = localStorage.getItem('token');
        
        // V√©rifier que toutes les donn√©es requises sont pr√©sentes
        if (!ticketData.title || !ticketData.description ||
            !ticketData.id_categorie || !ticketData.id_emplacement || !ticketData.id_priorite) {
            console.error('Donn√©es manquantes:', {
                title: ticketData.title,
                description: ticketData.description,
                id_categorie: ticketData.id_categorie,
                id_emplacement: ticketData.id_emplacement,
                id_priorite: ticketData.id_priorite
            });
            throw new Error('Donn√©es de ticket incompl√®tes');
        }

        // V√©rifier que l'ID de l'utilisateur est valide
        const currentUser = JSON.parse(localStorage.getItem('user'));
        if (!currentUser || !currentUser.id) {
            console.error('Utilisateur non connect√© ou ID invalide');
            throw new Error('Vous devez √™tre connect√© pour cr√©er un ticket.');
        }
        ticketData.id_utilisateur = currentUser.id;
        ticketData.id_demandeur = currentUser.id;

        // Transformer les donn√©es en format attendu par l'API
        const transformedData = {
            titre: ticketData.title,
            description: ticketData.description,
            commentaire: ticketData.commentaire || ticketData.description,
            id_demandeur: ticketData.id_demandeur,
            id_utilisateur: ticketData.id_utilisateur,
            id_societe: ticketData.id_societe,
            id_emplacement: ticketData.id_emplacement,
            id_priorite: ticketData.id_priorite,
            id_categorie: ticketData.id_categorie,
            id_statut: ticketData.id_statut,
            id_executant: ticketData.id_executant
        };
        if (ticketData.startDate) {
            transformedData.date_debut = ticketData.startDate;
        }
        if (ticketData.endDate) {
            transformedData.date_fin_prevue = ticketData.endDate;
        }

        console.log('Donn√©es envoy√©es √† l\'API:', transformedData);

        // V√©rifier si le token est pr√©sent
        if (!token) {
            throw new Error('Token d\'authentification manquant. Veuillez vous reconnecter.');
        }

        const response = await axios.post('/api/tickets', transformedData, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        });
        return response.data;
    } catch (error) {
        console.error('Error in createTicketFromChat:', error);
        
        // Gestion sp√©cifique des erreurs
        if (error.response?.status === 422) {
            const validationErrors = error.response.data.errors;
            if (validationErrors.id_demandeur) {
                throw new Error('Erreur d\'authentification. Veuillez vous reconnecter.');
            }
            // Afficher les autres erreurs de validation
            const errorMessages = Object.entries(validationErrors)
                .map(([field, messages]) => `${field}: ${messages.join(', ')}`)
                .join('\n');
            throw new Error(`Erreurs de validation:\n${errorMessages}`);
        } else if (error.response?.status === 401) {
            throw new Error('Session expir√©e. Veuillez vous reconnecter.');
        } else if (error.response?.status === 403) {
            throw new Error('Vous n\'avez pas les permissions n√©cessaires pour cr√©er un ticket.');
        } else {
            throw new Error('Une erreur est survenue lors de la cr√©ation du ticket. Veuillez r√©essayer.');
        }
    }
};

const formatTicketInfo = (ticket) => {
    return `
      <ticket>
        <id>${ticket.id}</id>
        <titre>${ticket.titre}</titre>
        <description>${ticket.description}</description>
        <priorite>${ticket.priorite?.designation || 'Non d√©finie'}</priorite>
        <statut>${ticket.statut?.designation || 'Non d√©fini'}</statut>
        <categorie>${ticket.categorie?.designation || 'Non d√©finie'}</categorie>
        <emplacement>${ticket.emplacement?.designation || 'Non d√©fini'}</emplacement>
        <societe>${ticket.societe?.designation || 'Non d√©finie'}</societe>
        <demandeur>${ticket.demandeur?.nom || 'Non d√©fini'}</demandeur>
        <executant>${ticket.executant?.nom || 'Non d√©fini'}</executant>
        <date_creation>${ticket.DateCreation}</date_creation>
        <date_fin_prevue>${ticket.DateFinPrevue}</date_fin_prevue>
        <date_fin_reelle>${ticket.DateFinReelle || 'Non d√©finie'}</date_fin_reelle>
      </ticket>
    `;
};